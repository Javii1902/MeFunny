<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">


<hibernate-configuration>
	<session-factory>
	<!-- Specifying the Driver class (which should be on the classpath as we have JDBC in our pom -->
		<property name="hibernate.connection.driver_class">org.mariadb.jdbc.Driver</property>
		<!-- Specify which dialect of SQL you're using. -->
		<property name="hibernate.dialect">org.hibernate.dialect.MariaDBDialect</property>
		<!-- Specify your DB credentials. -->
		<property name="hibernate.connection.url"></property>
		<property name="hibernate.connection.username"></property>
		<property name="hibernate.connection.password"></property>
		<!-- The next property is optional, but it can be useful if you want to know the SQL queries that Hibernate is generating for
		you. -->
		<property name="show_sql">true</property>
		<!-- This property determines how many a connections a user is allowed to your DB. -->
		<property name="hibernate.connection.pool_size">5</property>
		<!-- This property defines show Hibernate sessions are handled. In this case, sessions are tracked by their thread of execution. -->
		<property name="hibernate.current_session_context_class">thread</property>
		
		<!-- We can run Hibernate in 4 different modes: create, update, create-drop, and validate.
		
		create: Hibernate will purge the existing tables in your DB and create the tables from scratch. 
		
		update: Hibernate will connect to an existing DB and modify the schema without purging it. It will update any entities
		within our DB that are not consistent with our mapped Java models.
		
		create-drop: Hibernate creates all of the tables and then drops them when the application stops running. This is good for
		testing purposes but not ideal in production.
		
		validate: Hibernate will validate a pre-existing schema. This means that it will attempt to make sure that your Java models are
		mapped in a way that is consistent with your existing schema.-->
		<property name="hibernate.hbm2ddl.auto">update</property>
		
		<!-- We have to tell Hibernate which models are annotated because it doesn't autodetect annotations. -->
		<mapping class="com.mefunny.models.User"/>
		<mapping class="com.mefunny.models.Meme"/>
	</session-factory>
</hibernate-configuration>